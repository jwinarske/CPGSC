;------------------------------------
;Macro for BP-relative stack indexing
;------------------------------------
    IFDEF SMALLMODEL            
ARG1      EQU 4                 ; offset of first stack argument
ARG2      EQU 6                 ;        2nd
ARG3      EQU 8                 ;        3rd
NUMARGS   EQU 2
    ENDIF   ;SMALLMODEL
    IFDEF LARGEMODEL
ARG1      EQU 6                 
ARG2      EQU 8                 
ARG3      EQU 10                
NUMARGS   EQU 4
    ENDIF   ;LARGEMODEL
;-------------------------------------------
;Declaration of DGROUP (not model-dependent)
;-------------------------------------------
DATAGROUP MACRO
   CONST   SEGMENT  WORD PUBLIC 'CONST'
   CONST   ENDS
   _BSS    SEGMENT  WORD PUBLIC 'BSS'
   _BSS    ENDS
   _DATA   SEGMENT  WORD PUBLIC 'DATA'
   _DATA ENDS
   DGROUP  GROUP   CONST,  _BSS,   _DATA
ENDM

;-------------------------------
;Macro to declare code segment
;-------------------------------
CODESEG  MACRO
    IFDEF SMALLMODEL
_TEXT       SEGMENT  BYTE PUBLIC 'CODE'      ; CSEG macro
ASSUME CS: _TEXT
    ENDIF
    IFDEF LARGEMODEL
CPGSC_TEXT       SEGMENT  BYTE PUBLIC 'CODE'      ; CSEG macro
ASSUME CS: CPGSC_TEXT
    ENDIF
    ENDM
;------------------
;Procedural Macros
;------------------
procdef   MACRO procname
    IFDEF SMALLMODEL
procname PROC NEAR
    ENDIF
    IFDEF LARGEMODEL
procname PROC FAR
    ENDIF
    ENDM
;-----------
endpseg  MACRO
    IFDEF SMALLMODEL
_TEXT ENDS
    ENDIF
    IFDEF LARGEMODEL
CPGSC_TEXT ENDS
    ENDIF
    ENDM
;-----------
externfunct MACRO functname
    IFDEF SMALLMODEL
EXTRN functname:NEAR
    ENDIF
    IFDEF LARGEMODEL
EXTRN functname:FAR
    ENDIF
    ENDM
;-----------
externdata MACRO dataname
    IFDEF SMALLMODEL
EXTRN dataname:WORD
    ENDIF
    IFDEF LARGEMODEL
EXTRN dataname: DWORD
    ENDIF
    ENDM
;-------------------------------------------
;Macro for getting second argument off stack
;-------------------------------------------
LOAD_DATA MACRO
    IFDEF SMALLMODEL
mov ax, [bp + ARG2]
    ENDIF
    IFDEF LARGEMODEL
mov ax, [bp + ARG3]
    ENDIF
    ENDM
;-----------
PUSH_SEG  MACRO
    IFDEF SMALLMODEL
;                         null in small model
    ENDIF
    IFDEF LARGEMODEL
push ax
    ENDIF
    ENDM
